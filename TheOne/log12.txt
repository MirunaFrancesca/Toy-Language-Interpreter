Id: 1
The execution stack is:
( Ref(int) v; ( new(v,20); ( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) ) ) )
The table of symbols is:
{}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
Ref(int) v
( new(v,20); ( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) ) )
The table of symbols is:
{}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
Ref(int) v
( new(v,20); ( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) ) )
The table of symbols is:
{}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
( new(v,20); ( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) ) )
The table of symbols is:
{v=(0,int)}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
( new(v,20); ( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) ) )
The table of symbols is:
{v=(0,int)}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
new(v,20)
( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) )
The table of symbols is:
{v=(0,int)}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
new(v,20)
( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) )
The table of symbols is:
{v=(0,int)}
The heap table is:
{}
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) )
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
( print(readHeap( v )); ( writeHeap( v, 30 ); print(readHeap( v )+5) ) )
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
print(readHeap( v ))
( writeHeap( v, 30 ); print(readHeap( v )+5) )
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
print(readHeap( v ))
( writeHeap( v, 30 ); print(readHeap( v )+5) )
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
The file table is:
{}


Id: 1
The execution stack is:
( writeHeap( v, 30 ); print(readHeap( v )+5) )
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
20
The file table is:
{}


Id: 1
The execution stack is:
( writeHeap( v, 30 ); print(readHeap( v )+5) )
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
20
The file table is:
{}


Id: 1
The execution stack is:
writeHeap( v, 30 )
print(readHeap( v )+5)
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
20
The file table is:
{}


Id: 1
The execution stack is:
writeHeap( v, 30 )
print(readHeap( v )+5)
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->20) }
The out list is:
20
The file table is:
{}


Id: 1
The execution stack is:
print(readHeap( v )+5)
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->30) }
The out list is:
20
The file table is:
{}


Id: 1
The execution stack is:
print(readHeap( v )+5)
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->30) }
The out list is:
20
The file table is:
{}


Id: 1
The execution stack is:
The table of symbols is:
{v=(1,int)}
The heap table is:
{(1->30) }
The out list is:
20
35
The file table is:
{}


